{"version":3,"sources":["Recipes.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","totalWeight","image","source","cal","Math","floor","totalW","className","class","href","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","map","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOA0BeA,EAxBA,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,OAEhDC,EAAMC,KAAKC,MAAMN,EAAS,GAC1BO,EAASF,KAAKC,MAAML,EAAY,GAEpC,OAEI,yBAAKO,UAAU,eACb,yBAAKC,MAAM,kBACT,uBAAGC,KAAK,2BAA2BF,UAAU,QAC7C,uBAAGE,KAAK,8CAA8CF,UAAU,gBAAe,yBAAKG,IAAI,+BAA+B,uCACrH,yBAAKH,UAAU,MAAMG,IAAKT,EAAOU,IAAI,KACrC,wBAAIJ,UAAU,SAAST,IAEvB,6BACA,4BAAI,0BAAMS,UAAU,gBAAgBJ,GAApC,QAAoD,0BAAMI,UAAU,mBAAhB,IAAoCD,GAAxF,MACA,6BACF,wBAAIC,UAAU,UAAS,uBAAGE,KAAK,KAAKP,O,MCyC/BU,MAxDf,WAEE,IAFa,EAKiBC,mBAAS,IAL1B,mBAKNC,EALM,KAKGC,EALH,OAMeF,mBAAS,IANxB,mBAMNG,EANM,KAMEC,EANF,OAOaJ,mBAAS,WAPtB,mBAONK,EAPM,KAOCC,EAPD,KASbC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAkBhB,OACM,6BACE,yBAAKpB,UAAU,yBACb,yBAAKA,UAAU,cACb,0BAAMA,UAAU,cAAcuB,SAVxB,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MAQE,2BAAOV,UAAU,aAAa0B,KAAK,OAAOC,MAAOlB,EAAQmB,SAhBlD,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,OACnBN,QAAQC,IAAIb,MAeA,4BAAQT,UAAU,gBAAgB0B,KAAK,UAAvC,YAGN,yBAAK1B,UAAU,iBAAf,gCAEA,yBAAKC,MAAM,aAEP,yBAAKD,UAAU,QACZO,EAAQuB,KAAI,SAAAC,GAAM,OACjB,kBAAC,EAAD,CAAQxC,MAAOwC,EAAOA,OAAOC,MAAOxC,SAAUuC,EAAOA,OAAOvC,SAAUC,YAAasC,EAAOA,OAAOtC,YAAaC,MAAOqC,EAAOA,OAAOrC,MAAOC,OAAQoC,EAAOA,OAAOpC,cAKxK,4BAAQK,UAAU,yBAAlB,YC3CUiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3aa2db84.chunk.js","sourcesContent":["import React from 'react';\n\nconst Recipe = ({title, calories, totalWeight, image, source})=> {\n\n  let cal = Math.floor(calories/4);\n  let totalW = Math.floor(totalWeight/4);\n\n  return(\n\n      <div className=\"card-recipe\">\n        <div class=\"container-card\">\n          <a href=\"https://www.youtube.com/\" className=\"card\" >\n          <a href=\"https://www.youtube.com/watch?v=4bejSQdhVeo\" className=\"save-recipes\"><img src=\"set-icons-bookmark-add.png\" /><span>save</span></a>\n            <img className=\"pic\" src={image} alt=\"\"/>\n            <h4 className=\"title\">{title}</h4>\n          </a>\n            <hr />\n            <h5><span className='App-link cal'>{cal}</span> kcal<span className='App-link weight'> {totalW}</span> g</h5>\n            <hr />\n          <h5 className=\"source\"><a href=\"#\">{source}</a></h5>\n        </div>\n      </div>\n\n  );\n}\n\nexport default Recipe;","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipes';\nimport './App.css';\n\nfunction App() {\n\n  const APP_ID = \"0fba610d\";\n  const APP_KEY = \"ab0b446842fcd0b4bee6d5e3de71c666\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n\n  useEffect(()=> {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async ()=> {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  };\n\n  return (\n        <div>\n          <div className=\"header App-header App\">\n            <div className=\"search-bar\">\n              <form className=\"search-form\" onSubmit={getSearch} >\n                <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} /> \n                <button className=\"search-button\" type=\"submit\">Search</button>\n              </form>\n            </div>\n          <div className=\"bottom-header\">refine search by Calories ^</div>\n          </div>\n          <div class=\"container\">\n            \n              <div className=\"main\">\n                {recipes.map(recipe => (\n                  <Recipe title={recipe.recipe.label} calories={recipe.recipe.calories} totalWeight={recipe.recipe.totalWeight} image={recipe.recipe.image} source={recipe.recipe.source} />\n                ))}\n              </div>\n           \n          </div>\n          <footer className=\"footer App App-header\">Footer</footer>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}