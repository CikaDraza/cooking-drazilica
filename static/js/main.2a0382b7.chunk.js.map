{"version":3,"sources":["components/counter.jsx","components/Recipes.js","App.js","serviceWorker.js","index.js"],"names":["Counter","state","count","className","this","counting","src","alt","Component","Recipe","title","calories","totalWeight","image","source","sourceUrl","share","cal","Math","floor","totalW","class","href","onClick","clickObj","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","map","recipe","label","shareAs","url","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAuBeA,G,gNAnBdC,MAAQ,CACPC,MAAO,G,wEAIP,OACC,yBAAKC,UAAU,cACd,0BAAMA,UAAS,wBAAmBC,KAAKC,aAAeD,KAAKH,MAAMC,OACjE,yBAAKI,IAAI,YAAYC,IAAI,Y,iCAO3B,OAA2B,GAApBH,KAAKH,MAAMC,MADH,SAC2BE,KAAKH,MAAMC,U,GAhBjCM,cCiCPC,EAhCA,SAAC,GAAuE,IAArEC,EAAoE,EAApEA,MAAOC,EAA6D,EAA7DA,SAAUC,EAAmD,EAAnDA,YAAaC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MACrEC,EAAMC,KAAKC,MAAMR,EAAW,GAC5BS,EAASF,KAAKC,MAAMP,EAAc,GAMtC,OACC,yBAAKT,UAAU,eACd,yBAAKkB,MAAM,kBACV,uBAAGC,KAAMN,EAAOb,UAAU,QACzB,uBAAGmB,KAAK,IAAInB,UAAU,eAAeoB,QANxB,SAACC,MAOb,yBAAKlB,IAAI,+BACT,uCAED,yBAAKH,UAAU,MAAMG,IAAKO,EAAON,IAAI,KACrC,wBAAIJ,UAAU,SAASO,IAExB,6BACA,4BACC,0BAAMP,UAAU,gBAAgBc,GADjC,QACiD,0BAAMd,UAAU,mBAAhB,IAAoCiB,GADrF,MAGA,6BACA,wBAAIjB,UAAU,UACb,uBAAGmB,KAAMP,GAAYD,OC+CXW,MAtEf,WACC,IADc,EAIkBC,mBAAS,IAJ3B,mBAINC,EAJM,KAIGC,EAJH,OAKgBF,mBAAS,IALzB,mBAKNG,EALM,KAKEC,EALF,OAMcJ,mBAAS,WANvB,mBAMNK,EANM,KAMCC,EAND,KAQdC,qBACC,WACCC,MAED,CAAEH,IAGH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCL,EAApC,mBAfd,WAec,oBAdb,qCAaG,cACZM,EADY,gBAGCA,EAASC,OAHV,OAGZC,EAHY,OAIlBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MALC,2CAAH,qDAmBhB,OACC,6BACC,yBAAKrC,UAAU,yBACd,yBAAKA,UAAU,cACd,yBAAKA,UAAU,UACd,0BAAMA,UAAU,cAAcwC,SAXjB,SAACC,GAClBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MASL,2BAAO3B,UAAU,aAAa2C,KAAK,OAAOC,MAAOlB,EAAQmB,SAjB1C,SAACJ,GACrBd,EAAUc,EAAEK,OAAOF,OACnBN,QAAQC,IAAIb,MAgBP,4BAAQ1B,UAAU,gBAAgB2C,KAAK,UAAvC,YAKF,kBAAC,EAAD,OAED,yBAAK3C,UAAU,iBAAf,gCAED,yBAAKkB,MAAM,aACV,yBAAKlB,UAAU,QACbwB,EAAQuB,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,CACCzC,MAAOyC,EAAOA,OAAOC,MACrBzC,SAAUwC,EAAOA,OAAOxC,SACxBC,YAAauC,EAAOA,OAAOvC,YAC3BC,MAAOsC,EAAOA,OAAOtC,MACrBC,OAAQqC,EAAOA,OAAOrC,OACtBE,MAAOmC,EAAOA,OAAOE,QACrBtC,UAAWoC,EAAOA,OAAOG,WAK7B,4BAAQnD,UAAU,yBAAlB,YC3DiBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2a0382b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass Counter extends Component {\n\tstate = {\n\t\tcount: 0\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"items-cart\">\n\t\t\t\t<span className={`num-items App ${this.counting()}`}>{this.state.count}</span>\n\t\t\t\t<img src=\"carte.png\" alt=\"icon\" />\n\t\t\t</div>\n\t\t);\n\t}\n\n\tcounting() {\n\t\tlet addClass = 'hidden';\n\t\treturn this.state.count == 0 ? addClass : this.state.count;\n\t}\n}\n\nexport default Counter;\n","import React from 'react';\nimport Caunter from './counter';\nimport App from '../App';\n\nconst Recipe = ({ title, calories, totalWeight, image, source, sourceUrl, share }) => {\n\tlet cal = Math.floor(calories / 4);\n\tlet totalW = Math.floor(totalWeight / 4);\n\n\tconst cart = [];\n\n\tconst saveCart = (clickObj) => {};\n\n\treturn (\n\t\t<div className=\"card-recipe\">\n\t\t\t<div class=\"container-card\">\n\t\t\t\t<a href={share} className=\"card\">\n\t\t\t\t\t<a href=\"#\" className=\"save-recipes\" onClick={saveCart}>\n\t\t\t\t\t\t<img src=\"set-icons-bookmark-add.png\" />\n\t\t\t\t\t\t<span>save</span>\n\t\t\t\t\t</a>\n\t\t\t\t\t<img className=\"pic\" src={image} alt=\"\" />\n\t\t\t\t\t<h4 className=\"title\">{title}</h4>\n\t\t\t\t</a>\n\t\t\t\t<hr />\n\t\t\t\t<h5>\n\t\t\t\t\t<span className=\"App-link cal\">{cal}</span> kcal<span className=\"App-link weight\"> {totalW}</span> g\n\t\t\t\t</h5>\n\t\t\t\t<hr />\n\t\t\t\t<h5 className=\"source\">\n\t\t\t\t\t<a href={sourceUrl}>{source}</a>\n\t\t\t\t</h5>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Recipe;\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport Recipe from './components/Recipes';\nimport './App.css';\nimport Counter from './components/counter';\n\nfunction App() {\n\tconst APP_ID = '0fba610d';\n\tconst APP_KEY = 'ab0b446842fcd0b4bee6d5e3de71c666';\n\n\tconst [ recipes, setRecipes ] = useState([]);\n\tconst [ search, setSearch ] = useState('');\n\tconst [ query, setQuery ] = useState('chicken');\n\n\tuseEffect(\n\t\t() => {\n\t\t\tgetRecipes();\n\t\t},\n\t\t[ query ]\n\t);\n\n\tconst getRecipes = async () => {\n\t\tconst response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n\n\t\tconst data = await response.json();\n\t\tsetRecipes(data.hits);\n\t\tconsole.log(data.hits);\n\t};\n\n\tconst updateSearch = (e) => {\n\t\tsetSearch(e.target.value);\n\t\tconsole.log(search);\n\t};\n\n\tconst getSearch = (e) => {\n\t\te.preventDefault();\n\t\tsetQuery(search);\n\t\tsetSearch('');\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"header App-header App\">\n\t\t\t\t<div className=\"top-header\">\n\t\t\t\t\t<div className=\"search\">\n\t\t\t\t\t\t<form className=\"search-form\" onSubmit={getSearch}>\n\t\t\t\t\t\t\t<input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n\t\t\t\t\t\t\t<button className=\"search-button\" type=\"submit\">\n\t\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Counter />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"bottom-header\">refine search by Calories ^</div>\n\t\t\t</div>\n\t\t\t<div class=\"container\">\n\t\t\t\t<div className=\"main\">\n\t\t\t\t\t{recipes.map((recipe) => (\n\t\t\t\t\t\t<Recipe\n\t\t\t\t\t\t\ttitle={recipe.recipe.label}\n\t\t\t\t\t\t\tcalories={recipe.recipe.calories}\n\t\t\t\t\t\t\ttotalWeight={recipe.recipe.totalWeight}\n\t\t\t\t\t\t\timage={recipe.recipe.image}\n\t\t\t\t\t\t\tsource={recipe.recipe.source}\n\t\t\t\t\t\t\tshare={recipe.recipe.shareAs}\n\t\t\t\t\t\t\tsourceUrl={recipe.recipe.url}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<footer className=\"footer App App-header\">Footer</footer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Counter from './components/counter';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}